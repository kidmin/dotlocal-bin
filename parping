#!/usr/bin/env python3

##
## ping utility from iputils (has support "-D" for "Print timestamp") is required
##

import curses
import dataclasses
import datetime
import enum
import io
import re
import selectors
import socket
import subprocess
import sys
import time
from typing import List, Dict, Callable, TypeAlias


HISTORY_SIZE: int = 60


PING_ENV: Dict[str, str] = {
    'LANG': 'C',
}


PING_SUCCESS_OUTPUT_MATCHER: Callable = re.compile(r'^\[([0-9]+)\.([0-9]+)\] [0-9]+ bytes from ').match


class ResultColor(enum.IntEnum):
    UNKNOWN = 1
    OK = 2
    FAILED = 3


@dataclasses.dataclass(eq=False)
class TargetAddress:
    address: str
    ping_process: subprocess.Popen | None = None
    last_success_timestamp: float = -1.0
    history: List[bool | None] = dataclasses.field(default_factory=list)
    fail_count: int = -1


HostName: TypeAlias = str
@dataclasses.dataclass(eq=False)
class PingTargetHost:
    hostname: HostName
    ping_v4: TargetAddress | None = None
    ping_v6: TargetAddress | None = None
TargetDict: TypeAlias = Dict[HostName, PingTargetHost]


HostnameMaxLength: int = -1
AddressMaxLength: int = -1


def load_targets() -> TargetDict:
    global HostnameMaxLength
    global AddressMaxLength

    targets: TargetDict = dict()

    print('Enter hostname or IPv4/IPv6 address, one per line.')
    print('End with Ctrl-D:')
    try:
        for hostname in (l.rstrip() for l in sys.stdin):
            if hostname.lower() in (e.lower() for e in targets.keys()):
                print(f"[WARN] Duplicate target: {hostname}", file=sys.stderr)
                continue
            try:
                addrinfo = socket.getaddrinfo(
                    hostname,
                    port=None,
                    type=socket.SOCK_DGRAM,
                    flags=socket.AI_ADDRCONFIG
                )
            except socket.gaierror:
                print(f"[WARN] Name resolution failure: {hostname}", file=sys.stderr)
            else:
                if len(hostname) > HostnameMaxLength:
                    HostnameMaxLength = len(hostname)

                address_v4 = next((e[4][0] for e in addrinfo if e[0] == socket.AF_INET), None)
                ping_v4 = None
                if address_v4:
                    if len(address_v4) > AddressMaxLength:
                        AddressMaxLength = len(address_v4)
                    ping_v4 = TargetAddress(address_v4)

                address_v6 = next((e[4][0] for e in addrinfo if e[0] == socket.AF_INET6), None)
                ping_v6 = None
                if address_v6:
                    if len(address_v6) > AddressMaxLength:
                        AddressMaxLength = len(address_v6)
                    ping_v6 = TargetAddress(address_v6)

                targets[hostname] = PingTargetHost(hostname=hostname, ping_v4=ping_v4, ping_v6=ping_v6)
    except KeyboardInterrupt:
        print('cancelled.', file=sys.stderr)
        sys.exit(1)

    if not targets:
        print('[ERROR] Target list is empty', file=sys.stderr)
        sys.exit(1)

    return targets


def start_ping(targets: TargetDict, sel: selectors.BaseSelector) -> None:
    for ping_target in (e for target in targets.values() for e in (target.ping_v4, target.ping_v6) if e):
        ping_target.ping_process = subprocess.Popen(
            [
                '/bin/ping',
                '-n',
                '-D',
                '-i', '1',
                ping_target.address,
            ],
            stdin=subprocess.DEVNULL,
            stdout=subprocess.PIPE,
            close_fds=True,
            env=PING_ENV,
            shell=False,
            cwd='/tmp',
            encoding='US-ASCII'
        )

        ping_target.history = [None for _ in range(HISTORY_SIZE)]
        ping_target.fail_count = 0

        sel.register(ping_target.ping_process.stdout, selectors.EVENT_READ, ping_target) # type: ignore

        time.sleep(0.1)


def display(stdscr: curses.window, targets: TargetDict, time_now: float) -> None:
    stdscr.clear()
    stdscr.addstr(0, 0, '[parallel ping]')
    stdscr.addstr(1, 0, f"[{datetime.datetime.fromtimestamp(time_now).isoformat(sep=' ', timespec='seconds')} (unix time={int(time_now)})]")

    ypos: int = 2
    for hostname, target in targets.items():
        for ping_target in (e for e in (target.ping_v4, target.ping_v6) if e):
            ypos += 1

            ping_target.history.pop(0)
            if ping_target.last_success_timestamp < time_now - 1.1:
                ping_target.history.append(False)
                ping_target.fail_count += 1
                hostname_style = curses.A_BOLD
            else:
                ping_target.history.append(True)
                hostname_style = curses.A_NORMAL

            stdscr.addstr(ypos, 0, hostname, hostname_style)
            stdscr.addstr(ypos, HostnameMaxLength + 2, ping_target.address, hostname_style)
            stdscr.addstr(ypos, HostnameMaxLength + 2 + AddressMaxLength + 2, '|')
            for result in ping_target.history:
                if result is None:
                    stdscr.addstr(' ', curses.A_NORMAL | curses.color_pair(ResultColor.UNKNOWN))
                elif result:
                    stdscr.addstr('o', curses.A_NORMAL | curses.color_pair(ResultColor.OK))
                else:
                    stdscr.addstr('x', curses.A_BOLD | curses.color_pair(ResultColor.FAILED))
            stdscr.addstr('  ')
            stdscr.addstr(f"losts={ping_target.fail_count:4d}")

    stdscr.addstr(ypos + 2, 0, '[press Ctrl-C (send SIGINT) to quit]')
    stdscr.refresh()


def display_loop(stdscr: curses.window, sel: selectors.BaseSelector, targets: TargetDict) -> None:
    needed_lines: int = sum(1 for target in targets.values() for e in (target.ping_v4, target.ping_v6) if e) + 5
    needed_cols: int = HISTORY_SIZE + HostnameMaxLength + 2 + AddressMaxLength + 2 + 13

    if needed_lines > curses.LINES or needed_cols > curses.COLS:
        raise RuntimeError(f"not enough terminal size: at least {needed_cols} cols x {needed_lines} lines needed")

    try:
        curses.curs_set(0)
    except curses.error:
        pass
    curses.use_default_colors()
    (default_fg, default_bg) = curses.pair_content(0)
    curses.init_pair(ResultColor.UNKNOWN, default_fg, default_bg)
    curses.init_pair(ResultColor.OK, curses.COLOR_GREEN, default_bg)
    curses.init_pair(ResultColor.FAILED, curses.COLOR_RED, default_bg)
    try:
        previous_timestamp: float = time.time()
        while True:
            events = sel.select(timeout=0.1)
            time_now: float = time.time()
            for event, _ in events:
                if event.data.ping_process.poll():
                    event.data.ping_process = None
                    sel.unregister(event.fileobj)
                else:
                    if m := PING_SUCCESS_OUTPUT_MATCHER(event.fileobj.readline()): # type: ignore
                        timestamp_float: float = float(f"{m.group(1)}.{m.group(2)}")
                        event.data.last_success_timestamp = timestamp_float
            if time_now > previous_timestamp + 1.1:
                if all(e.ping_process is None for target in targets.values() for e in (target.ping_v4, target.ping_v6) if e):
                    raise RuntimeError('All ping process has terminated')

                display(stdscr, targets, time_now)

                previous_timestamp = time_now
    except KeyboardInterrupt:
        print('[INFO] SIGINT received, exiting...', file=sys.stderr)


def main() -> None:
    targets: TargetDict = load_targets()
    print('[INFO] Targets are loaded. Starting...', file=sys.stderr)

    with selectors.DefaultSelector() as sel:
        start_ping(targets, sel)
        curses.wrapper(display_loop, sel, targets)


if __name__ == '__main__':
    main()

